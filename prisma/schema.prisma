generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id              String    @id @default(uuid())
  licensePlate    String    @unique
  make           String
  model          String
  year           Int
  ownershipType  String    // owned, leased, rented
  insuranceExpiry DateTime
  status         String    // active, inactive
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  currentDriver   Driver?   @relation("CurrentVehicle")
  maintenanceRecords MaintenanceRecord[]
  telematics     Telematics[]
  geofenceLogs   GeofenceLog[]
}

model Driver {
  id              String    @id @default(uuid())
  name            String
  phone           String
  email           String    @unique
  licenseNumber   String    @unique
  licenseExpiry   DateTime
  status          String    // on-duty, off-duty
  profilePicture  String?
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  currentVehicle  Vehicle?  @relation("CurrentVehicle", fields: [vehicleId], references: [id])
  vehicleId       String?   @unique
  documents       Document[]
  issuesReported  MaintenanceRecord[]
  geofenceLogs    GeofenceLog[]
}

model Document {
  id          String    @id @default(uuid())
  type        String
  url         String
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  driver      Driver    @relation(fields: [driverId], references: [id])
  driverId    String
}

model MaintenanceRecord {
  id          String    @id @default(uuid())
  description String
  status      String    // pending, in-progress, completed
  cost        Float
  issuePhotos String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  reportedBy  Driver    @relation(fields: [driverId], references: [id])
  driverId    String
  vendorId    String?
}

model Telematics {
  id              String    @id @default(uuid())
  gpsCoordinates  Json[]    // Array of {latitude, longitude, timestamp}
  speed           Float
  fuelLevel       Float
  engineStatus    String    // running, stopped
  timestamp       DateTime  @default(now())

  vehicle         Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId       String
}

model GeofenceLog {
  id          String    @id @default(uuid())
  event       String    // check-in, check-out, breach
  timestamp   DateTime  @default(now())

  driver      Driver    @relation(fields: [driverId], references: [id])
  driverId    String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  geofence    Geofence  @relation(fields: [geofenceId], references: [id])
  geofenceId  String
}

model Geofence {
  id          String    @id @default(uuid())
  name        String
  coordinates Json[]    // Array of {latitude, longitude}
  radius      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  logs        GeofenceLog[]
}